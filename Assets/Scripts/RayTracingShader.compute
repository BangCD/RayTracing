// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float pi = 3.1459f;
float2 _PixelOffset;


struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f,1.0f,1.0f);
    return ray;
}

// Function that takes a 2D point in normalized screen coordinates and converts it into a 3D ray in world space originating from the camera. 
Ray CreateCameraRay(float2 uv)
{
    //camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    //invert perspective projection of the view space position 
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

void IntersectGroundPlace(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}



float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.6f, 0.6f, 0.6f); // 60% of all light(RBG) will be reflected back,
        //can set it up to be specular of material its bouncing off of 
        
        ray.origin = hit.position + hit.normal + 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        
        
        return float3(0.0f, 0.0f, 0.0f);
    }
    else    //if ray misses object and hits sky
    {
        ray.energy = 0.0f;
        //sample skybox 
        float theta = acos(ray.direction.y) / -pi;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -pi*0.5f;

        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }

}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    float3 distance = ray.origin - sphere.xyz;  // distance from ray origin to center of sphere 
    float point1 = -dot(ray.direction, distance);   //calculate first point of intersection 
    float point2sqr = point1 * point1 - dot(distance, distance) + sphere.w * sphere.w;
    if (point2sqr < 0)
    {
        return;
    }
    float point2 = sqrt(point2sqr);
    float t = point1 - point2 > 0 ? point1 - point2 : point1 + point2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}


void SpawnMultipleSphere(in int row_Pass, in int col_Pass, inout Ray ray_Pass, inout RayHit bestHit_Pass)
{
    int numRows = row_Pass;
    int numCols = col_Pass;
    float xpos = 0.0f;
    float zpos = 0.0f;
    float radius = 1.0f;
    float sphereGap = 0.5f;
    for ( int rows = 0; rows <= numRows; rows++ )
    {
        for ( int cols = 0; cols <= numCols; cols++ )
        {
            
            IntersectSphere(ray_Pass, bestHit_Pass, float4(xpos, 2.0f, zpos, radius)); //float4(xpos, ypos, zpos , radius
            zpos += radius * 2 + sphereGap;

        }
        zpos = 0.0f;
        xpos += radius * 2 + sphereGap;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlace(ray, bestHit);
    
    //Spawn multiple sphere 
    SpawnMultipleSphere(10, 10, ray, bestHit);
    
    return bestHit;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);

    //Dimension of renderTex
    uint width, height;
    Result.GetDimensions(width, height);
    
    // transform pixel to -1 1 range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    
    Ray ray = CreateCameraRay(uv);
    
    //Skybox sampler
    //float theta = acos(ray.direction.y) / -pi;
    //float phi = atan2(ray.direction.x, -ray.direction.z) / -pi * 0.5f;
    //Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
    
    //color
    //Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);
    
    

    float3 result = float3(0,0,0);

    for(int i=0;i<8;i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray,hit);

        if(!any(ray.energy))
            break;
    }


    //float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1);
    
}   
